from aiogram.types import Message
from aiogram import types
from data.loader import bot, dp, db
from states.states import NumberState, YourStateEnum
from aiogram.dispatcher import FSMContext
import re
import aiohttp
from keyboards.reply import generate_main_menu, generate_main_menu_admin, generate_delivery_types, \
    generate_filials_list, generate_categories, generate_products, generate_admin_panel, generate_filials_information, \
    generate_information
from keyboards.inline import generate_product_detail, generate_cart_buttons


 # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞–ª–µ–π –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞

ADMIN_ID = 477797263
ADMIN_IDS_FILE = "admin_ids.txt"

async def start_register(message: Message, state=None):
    await NumberState.phone.set()
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>+998 ** *** ** **</b>')

@dp.message_handler(state=NumberState.phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.text
    result1 = re.search(r'\+998 \d\d \d\d\d \d\d \d\d', phone)
    result2 = re.search(r'\+998\d{9}', phone)
    if result1 or result2:
        await message.answer('–û–∫')
        chat_id = message.chat.id
        full_name = message.from_user.full_name
        await state.finish()
        db.insert_user(chat_id, full_name, phone)
        await show_main_menu(message)
        if chat_id == ADMIN_ID:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ñ–∞–π–ª –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            with open(ADMIN_IDS_FILE, "a") as file:
                file.write(str(chat_id) + "\n")
            await message.answer('–í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', reply_markup=generate_main_menu_admin())
    else:
        await message.answer('No')
        await state.finish()
        await again_start_register(message)

async def again_start_register(message: Message, state=None):
    await NumberState.phone.set()
    await message.answer('''–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∑–∞–ø–∏—Å—å. 
–ù–∞–ø–∏—à–∏—Ç–µ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: <b>+998 ** *** ** **</b>''')

  # -----------------------------–ú–µ–Ω—é -------------------------------

@dp.message_handler(regexp='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def show_main_menu(message: Message):
    chat_id = message.chat.id
    if chat_id == ADMIN_ID:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: ', reply_markup=generate_main_menu_admin())
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: ', reply_markup=generate_main_menu())

@dp.message_handler(regexp='üßë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å')
async def show_admin_panel(message: Message):
    chat_id = message.chat.id
    if chat_id == ADMIN_ID:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: ', reply_markup=generate_admin_panel())
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.')

@dp.message_handler(regexp='‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
async def show_main_menu_admin(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª: ', reply_markup=generate_main_menu_admin())

# @dp.message_handler(regexp='‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏')

@dp.message_handler(regexp='‚óÄ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
async def show_main_menu_admin(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=generate_categories())


@dp.message_handler(regexp='üìö –ö–∞—Ç–∞–ª–æ–≥')
@dp.message_handler(regexp='üöó –∫ –≤—ã–±–æ—Ä—É –¥–æ—Å—Ç–∞–≤–∫–∏')
async def show_delivery_choice(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞: ', reply_markup=generate_delivery_types())

@dp.message_handler(lambda message: message.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart_from_message(message: types.Message):
    chat_id = message.chat.id
    if db.get_cart_id(chat_id):
        cart_id = db.get_cart_id(chat_id)[0]
    else:
        db.create_cart_for_user(chat_id)
        cart_id = db.get_cart_id(chat_id)[0]

    db.update_cart_total_price_quantity(cart_id)
    total_price, total_quantity = db.get_cart_total_price_quantity(cart_id)
    try:
        total_price, total_quantity = int(total_price), int(total_quantity)
    except:
        total_price, total_quantity = 0, 0

    cart_products = db.cart_products_by_cart_id(cart_id)

    text = f'''–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n'''

    for cart_product in cart_products:
        text += f'''{cart_product[2]} - {cart_product[3]} —à—Ç - {cart_product[4]} —Å—É–º\n\n'''

    text += f'''–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity} —à—Ç
–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Å—É–º'''

    await bot.send_message(chat_id, text, reply_markup=generate_cart_buttons(cart_products, cart_id))



@dp.message_handler(regexp='‚óÄ –∫ —Ñ–∏–ª–∏–∞–ª–∞–º')
@dp.message_handler(regexp='üèÉ‚Äç‚ôÄÔ∏è–°–∞–º–æ–≤—ã–≤–æ–∑')
async def show_filials_choice(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª: ', reply_markup=generate_filials_list())


filials = [i[0] for i in db.get_filials_names()]

@dp.message_handler(regexp='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
@dp.message_handler(regexp='‚óÄÔ∏è –ù–∞–∑–∞–¥')
async def show_information(message: Message):
    await message.answer('‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', reply_markup=generate_information())

@dp.message_handler(regexp='üèò –§–∏–ª–∏–∞–ª—ã')
async def show_filials(message: Message):
    await message.answer('üèò –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª: ', reply_markup=generate_filials_information())

@dp.message_handler(lambda message: message.text.startswith('üèò'))
async def show_filial_details(message: types.Message):
    selected_filials = message.text[1:].split(',')
    for selected_filial in selected_filials:
        filial_info = db.get_filial(selected_filial.strip())
        if filial_info:
            filial_name, worktime, address, preorder = filial_info
            coordinates = db.get_filial_coordinates(selected_filial.strip())
            if coordinates:
                latitude, longitude = coordinates
                latitude = float(latitude)
                longitude = float(longitude)
                location = types.Location(latitude=float(latitude), longitude=float(longitude))
                map_link = f'https://maps.google.com/?q={latitude},{longitude}'
                details_text = f'''
üè¢ –§–∏–ª–∏–∞–ª: {filial_name}
üìç –ê–¥—Ä–µ—Å: {address}
‚åöÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {worktime}
üìû –ü—Ä–µ–¥–∑–∞–∫–∞–∑: {preorder}
üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {location.latitude}, {location.longitude}
üó∫ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ä—Ç—ã: {map_link}
                '''
            else:
                details_text = f'''
üè¢ –§–∏–ª–∏–∞–ª: {filial_name}
üìç –ê–¥—Ä–µ—Å: {address}
‚åöÔ∏è –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {worktime}
üåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
                '''
            await message.answer(details_text, reply_markup=generate_filials_information())
        else:
            await message.answer(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª–∏–∞–ª–µ "{selected_filial}" –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')


@dp.message_handler(lambda message: message.text in filials)
async def show_menu(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=generate_categories())


categories = [i[0] for i in db.get_categories()]


@dp.message_handler(lambda message: message.text in categories)
async def show_products(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä: ', reply_markup=generate_products(message.text))


products = [i[0] for i in db.get_all_products()]

@dp.message_handler(lambda message: message.text in products)
async def show_product_detail(message: Message):
    product = db.get_product_by_title(message.text)
    with open(product[6], mode='rb') as img:
        caption = f'–¢–æ–≤–∞—Ä: {product[1]}\n\n–ñ–∞–Ω—Ä: {product[2]}\n\n–ê–≤—Ç–æ—Ä: {product[3]}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {product[4]}\n\n–¶–µ–Ω–∞: {product[5]} —Å—É–º'
        await bot.send_photo(chat_id=message.chat.id,
                             photo=img,
                             caption=caption,
                             reply_markup=generate_product_detail(product[0]))

#--------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ—Å—Ç–∞–≤–∫–∞"
@dp.message_handler(regexp= 'üöó –î–æ—Å—Ç–∞–≤–∫–∞')
async def handle_delivery(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    request_location_button = types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)
    keyboard.add(request_location_button)

    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é:", reply_markup=keyboard)


# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# @dp.message_handler(content_types=[types.ContentType.LOCATION])
# async def handle_location(message: types.Message):
#     latitude = message.location.latitude
#     longitude = message.location.longitude
#
#     address = await get_address_from_coordinates(latitude, longitude)
#
#     await message.reply(f"–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n{address}")

#-------------------------------------------------------------
async def get_address_from_coordinates(latitude, longitude):
    async with aiohttp.ClientSession(connector=aiohttp.TCPConnector(ssl=False)) as session:
        async with session.get(
                f"https://nominatim.openstreetmap.org/reverse?format=json&lat={latitude}&lon={longitude}&zoom=18") as response:
            data = await response.json()
            address = data.get('display_name', '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return address

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(content_types=[types.ContentType.LOCATION])
async def handle_location(message: types.Message):
    latitude = message.location.latitude
    longitude = message.location.longitude

    address = await get_address_from_coordinates(latitude, longitude)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    confirm_button = types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥—Ä–µ—Å")
    keyboard.add(confirm_button)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await YourStateEnum.WaitingForAddressConfirmation.set()
    await message.reply(f"–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n{address}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
                        reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
@dp.message_handler(lambda message: message.text.lower() == '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥—Ä–µ—Å',
                    state=YourStateEnum.WaitingForAddressConfirmation)
async def confirm_address(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        latitude = data['latitude']
        longitude = data['longitude']
        address = data['address']

        db.insert_address(latitude, longitude, address)

        await message.reply("–ê–¥—Ä–µ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ!", reply_markup=types.ReplyKeyboardRemove())

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.finish()






