import sqlite3

class DataBase:
    def __init__(self):
        self.database = sqlite3.connect('shop.db', check_same_thread=False)

    def manager(self, sql, *args,
                fetchone: bool = False,
                fetchall: bool = False,
                commit: bool = False):
        with self.database as db:
            cursor = db.cursor()
            cursor.execute(sql, args)
            if commit:
                result = db.commit()
            if fetchone:
                result = cursor.fetchone()
            if fetchall:
                result = cursor.fetchall()
            return result


    def create_users_table(self):
        sql = '''CREATE TABLE IF NOT EXISTS users(
            telegram_id BIGINT PRIMARY KEY,
            full_name VARCHAR(100),
            phone VARCHAR(20) UNIQUE
        )'''
        self.manager(sql, commit=True)


    def get_user_by_id(self, telegram_id):
        sql = '''
        SELECT * FROM users WHERE telegram_id = ?
        '''
        return self.manager(sql, telegram_id, fetchone=True)


    def insert_user(self, telegram_id, full_name, phone):
        sql = '''
        INSERT INTO users(telegram_id, full_name, phone) VALUES (?,?,?)
        '''
        self.manager(sql, telegram_id, full_name, phone, commit=True)

    def create_filials_table(self):
        sql = '''
        CREATE TABLE IF NOT EXISTS filials(
            filial_id INTEGER PRIMARY KEY AUTOINCREMENT,
            filial_name VARCHAR(100),
            places INTEGER,
            worktime VARCHAR(100),
            address VARCHAR(100),
            preorder TEXT
        )
        '''
        self.manager(sql, commit=True)


    def insert_filials(self):
        sql = '''
        INSERT INTO filials(filial_name, worktime, address, preorder) VALUES
        ('–¶–£–ú - –ö–Ω–∏–∂–Ω—ã–µ —Ä—è–¥—ã', '9:00-20:00', '–£–ª–∏—Ü–∞ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω—Å–∫–∞—è, 17, –æ—Ä–∏–µ–Ω—Ç–∏—Ä: –º–µ—Ç—Ä–æ –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤', '–ü—Ä–µ–¥–∑–∞–∫–∞–∑ –∫–Ω–∏–≥ –ø–æ –Ω–æ–º–µ—Ä—É: +998 (90) 123-45-67'),
        ('–ú–∏—Ä–∞–±–∞–¥', '9:00-20:00', '–£–ª–∏—Ü–∞ –°–∞–¥—ã–∫–∞ –ê–∑–∏–º–æ–≤–∞, 43, –æ—Ä–∏–µ–Ω—Ç–∏—Ä:  –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä Glaeser-st', '–ü—Ä–µ–¥–∑–∞–∫–∞–∑ –∫–Ω–∏–≥ –ø–æ –Ω–æ–º–µ—Ä—É: +998 (90) 123-45-67'),
        ('–õ–∞–±–∑–∞–∫', '9:00-20:00', '–£–ª–∏—Ü–∞ –ê.–ö–∞–¥—ã—Ä–∏, 33, –æ—Ä–∏–µ–Ω—Ç–∏—Ä: –ø–∞—Ä–∫ –ê–Ω—Ö–æ—Ä', '–ü—Ä–µ–¥–∑–∞–∫–∞–∑ –∫–Ω–∏–≥ –ø–æ –Ω–æ–º–µ—Ä—É: +998 (90) 123-45-67'),
        ('–•–∞–¥—Ä–∞', '9:00-20:00', '–£–ª–∏—Ü–∞ –°–µ–±–∑–∞—Ä, 22, –æ—Ä–∏–µ–Ω—Ç–∏—Ä: –º–µ—Ç—Ä–æ –ì–∞—Ñ—É—Ä–∞ –ì—É–ª—è–º–∞', '–ü—Ä–µ–¥–∑–∞–∫–∞–∑ –∫–Ω–∏–≥ –ø–æ –Ω–æ–º–µ—Ä—É: +998 (90) 123-45-67')
        '''
        self.manager(sql, commit=True)


    def get_filials_names(self):
        sql = '''
        SELECT filial_name FROM filials;
        '''
        return self.manager(sql, fetchall=True)


    def get_filial(self, filial_name):
        sql = '''
        SELECT filial_name, worktime, address, preorder FROM filials WHERE filial_name = ?
        '''
        return self.manager(sql, filial_name, fetchone=True)

    def create_coordinates_table(self):
        sql = '''
        CREATE TABLE IF NOT EXISTS coordinates(
            coordinate_id INTEGER PRIMARY KEY AUTOINCREMENT,
            filial_id INTEGER,
            latitude REAL,
            longitude REAL,
            FOREIGN KEY (filial_id) REFERENCES filials (filial_id)
        )
        '''
        self.manager(sql, commit=True)

    def insert_coordinates(self):
        sql = '''
        INSERT INTO coordinates(filial_id, latitude, longitude) VALUES
        (1, 41.3076, 69.269739),
        (2, 41.31032, 69.291771),
        (3, 41.3218602, 69.2507297),
        (4, 41.323358, 69.244487)
        '''
        self.manager(sql, commit=True)

    def get_filial_coordinates(self, filial_name):
        sql = '''
        SELECT latitude, longitude FROM coordinates
        INNER JOIN filials ON filials.filial_id = coordinates.filial_id
        WHERE filials.filial_name = ?
        '''
        return self.manager(sql, filial_name, fetchone=True)

    def create_categories_table(self):
        sql = '''
        CREATE TABLE IF NOT EXISTS categories(
            category_id INTEGER PRIMARY KEY AUTOINCREMENT,
            category_title VARCHAR(50) UNIQUE
        )
        '''
        self.manager(sql, commit=True)

    def insert_categories(self):
        sql = '''
        INSERT INTO categories(category_title) VALUES 
        ('üìä –î–µ–ª–æ–≤–∞—è –∏ –±–∏–∑–Ω–µ—Å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'),
        ('üîç –î–µ—Ç–µ–∫—Ç–∏–≤—ã –∏ —Ç—Ä–∏–ª–ª–µ—Ä—ã'),
        ('üé≥ –î–æ–º, —Ö–æ–±–±–∏'),
        ('üß∏ –î–µ—Ç—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'),
        ('üé≠ –†–æ–º–∞–Ω—ã'),
        ('üî¨ –ù–∞—É–∫–∞'),
        ('üßó‚Äç‚ôÄÔ∏è–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'),
        ('üßò –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è'),
        ('üéë –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞')
        '''
        self.manager(sql, commit=True)

    def get_categories(self):
        sql = '''
        SELECT category_title FROM categories
        '''
        return self.manager(sql, fetchall=True)

    def create_products_table(self):
        sql = '''
        CREATE TABLE IF NOT EXISTS products(
            product_id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_title VARCHAR(100),
            genre VARCHAR(100),
            author VARCHAR(100),
            description VARCHAR(255),
            price INTEGER,
            image TEXT,
            category_id INTEGER REFERENCES categories(category_id) 
        )
        '''
        self.manager(sql, commit=True)


    def insert_products(self):
        sql = '''
        INSERT INTO products(product_title, genre, author, description, price, image, category_id)
        VALUES
        ('–î—É–º–∞–π –º–µ–¥–ª–µ–Ω–Ω–æ, —Ä–µ—à–∞–π –±—ã—Å—Ç—Ä–æ','üìä –î–µ–ª–æ–≤–∞—è –∏ –±–∏–∑–Ω–µ—Å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞','–î—ç–Ω–∏–µ–ª –ö–∞–Ω–µ–º–∞–Ω','–ö–∞–Ω–µ–º–∞–Ω ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥ –∏ –ª–∞—É—Ä–µ–∞—Ç –ù–æ–±–µ–ª–µ–≤—Å–∫–æ–π –ø—Ä–µ–º–∏–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ. –í –∫–Ω–∏–≥–µ –æ–Ω –∏—Å—Å–ª–µ–¥—É–µ—Ç, –∫–∞–∫ –∏–Ω—Ç—É–∏—Ü–∏—è –∏ –º—ã—à–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ –∏ –ø–æ–º–æ–≥–∞—é—Ç –Ω–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è.', 120000, 'images/2.jpeg', 1),
        ('–í —Ä–∞–±–æ—Ç—É —Å –≥–æ–ª–æ–≤–æ–π. –ü–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—Ö–∞ –æ—Ç IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞','üìä –î–µ–ª–æ–≤–∞—è –∏ –±–∏–∑–Ω–µ—Å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞','–ö—ç–ª –ù—å—é–ø–æ—Ä—Ç','–ê–≤—Ç–æ—Ä –¥–µ–ª–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥–æ–º –∫ —Ä–∞–±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –±—ã—Å—Ç—Ä–æ —É—Å–≤–∞–∏–≤–∞—Ç—å —Å–ª–æ–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–æ–±–∏–≤–∞—Ç—å—Å—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –º–µ–Ω—å—à–µ–µ –≤—Ä–µ–º—è.', 125000, 'images/3.jpeg', 1),
        ('Nudge. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞','üìä –î–µ–ª–æ–≤–∞—è –∏ –±–∏–∑–Ω–µ—Å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞','–†–∏—á–∞—Ä–¥ –¢–∞–ª–µ—Ä –∏ –ö–∞—Å—Å –°–∞–Ω—Å—Ç–µ–π–Ω','–≠—Ç–æ –∫–Ω–∏–≥–∞ –æ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–µ –∏ —Å–ø–æ—Å–æ–±–∞—Ö ¬´–ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞—Ç—å¬ª –ª—é–¥–µ–π –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º, –Ω–µ –ª–∏—à–∞—è –∏—Ö —Å–≤–æ–±–æ–¥—ã –≤—ã–±–æ—Ä–∞.', 120000, 'images/4.png', 1),
        ('–ò–ª–æ–Ω –ú–∞—Å–∫. Tesla, SpaceX –∏ –¥–æ—Ä–æ–≥–∞ –≤ –±—É–¥—É—â–µ–µ','üìä –î–µ–ª–æ–≤–∞—è –∏ –±–∏–∑–Ω–µ—Å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞','–≠—à–ª–∏ –í—ç–Ω—Å','–ö–Ω–∏–≥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–µ—Ç—Å—Ç–≤–∞ –ú–∞—Å–∫–∞ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º –µ–≥–æ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π. –ü—Ä–∏ —ç—Ç–æ–º –í—ç–Ω—Å –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–µ—Ç, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –≤ –∂–∏–∑–Ω–∏ –±–∏–∑–Ω–µ—Å–º–µ–Ω–∞ –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è.', 120000, 'images/5.png', 1),
        ('–õ—É–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å', '–î–µ—Ç–µ–∫—Ç–∏–≤—ã –∏ —Ç—Ä–∏–ª–ª–µ—Ä—ã', '–£–∏–ª–∫–∏ –ö–æ–ª–ª–∏–Ω–∑', '–ó–Ω–∞–º–µ–Ω–∏—Ç—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–≥–∞–¥—ã–≤–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏—Ö –≥–µ—Ä–æ–µ–≤, –Ω–æ –∏ —á–∏—Ç–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –æ–Ω –¥–∞–µ—Ç –≤ —Ä—É–∫–∏ –ª–∏—à—å –Ω–∏—Ç–æ—á–∫—É –æ—Ç –∫–ª—É–±–∫–∞ –∑–∞–ø—É—Ç–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.', 90000, 'images/1.jpeg', 2)
        '''
        self.manager(sql, commit=True)


    def drop_products(self):
        sql = '''DROP TABLE IF EXISTS products'''
        self.manager(sql, commit=True)


    def get_product_by_category(self, category_title):
        sql = '''
        SELECT product_title FROM products WHERE category_id = (
            SELECT category_id FROM categories WHERE category_title = ?
        )
        '''
        return self.manager(sql, category_title, fetchall=True)


    def get_all_products(self):
        sql = '''
        SELECT product_title FROM products;
        '''
        return self.manager(sql, fetchall=True)

    def get_product_by_title(self, product_title):
        sql = '''
        SELECT * FROM products WHERE product_title = ?
        '''
        return self.manager(sql, product_title, fetchone=True)


    def create_cart_table(self):
        sql = '''
        CREATE TABLE IF NOT EXISTS cart(
            cart_id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER REFERENCES users(telegram_id),
            total_quantity INTEGER DEFAULT 0,
            total_price INTEGER DEFAULT 0
        )
        '''
        self.manager(sql, commit=True)


    def create_cart_products_table(self):
        sql = '''
        CREATE TABLE IF NOT EXISTS cart_products(
            cart_product_id INTEGER PRIMARY KEY AUTOINCREMENT,
            cart_id INTEGER REFERENCES cart(cart_id),
            product_title VARCHAR(100) NOT NULL,
            quantity INTEGER NOT NULL,
            final_price INTEGER NOT NULL,
            
            UNIQUE(cart_id, product_title)
        )
        '''
        self.manager(sql, commit=True)


    def create_cart_for_user(self, telegram_id):
        sql = '''
        INSERT INTO cart(telegram_id) VALUES (?)
        '''
        self.manager(sql, telegram_id, commit=True)


    def get_cart_id(self, telegram_id):
        sql = '''
        SELECT cart_id FROM cart WHERE telegram_id = ?
        '''
        return self.manager(sql, telegram_id, fetchone=True)


    def get_product_by_id(self, product_id):
        sql = '''
        SELECT * FROM products WHERE product_id = ?
        '''
        return self.manager(sql, product_id, fetchone=True)


    def insert_cart_product(self, cart_id, product_title, quantity, final_price):
        sql = '''
            INSERT INTO cart_products(cart_id, product_title, quantity, final_price)
            VALUES (?,?,?,?)
        '''
        self.manager(sql, cart_id, product_title, quantity, final_price, commit=True)


    def update_cart_product(self, cart_id, product_title, quantity, final_price):
        sql = '''
        UPDATE cart_products
        SET
        final_price = final_price + ?,
        quantity = quantity + ?
        WHERE product_title = ? AND cart_id = ?
        '''
        self.manager(sql, final_price, quantity, product_title, cart_id, commit=True)



    def update_cart_total_price_quantity(self, cart_id):
        sql = '''
        UPDATE cart 
        SET 
        total_quantity = (
            SELECT SUM(quantity) FROM cart_products WHERE cart_id = ?
        ),
        total_price = (
            SELECT SUM(final_price) FROM cart_products WHERE cart_id = ?
        )
        WHERE cart_id = ?
        '''
        self.manager(sql, cart_id, cart_id, cart_id, commit=True)


    def get_cart_total_price_quantity(self, cart_id):
        sql = '''
        SELECT total_price, total_quantity FROM cart WHERE cart_id = ?
        '''
        return self.manager(sql, cart_id, fetchone=True)


    def cart_products_by_cart_id(self, cart_id):
        sql = '''
        SELECT * FROM cart_products WHERE cart_id = ?
        '''
        return self.manager(sql, cart_id, fetchall=True)

    def clear_cart(self, cart_id):
        sql = '''
        DELETE FROM cart_products WHERE cart_id = ?
        '''
        return self.manager(sql, cart_id, fetchall=True)

    def create_address_table(self):
        sql = '''
        CREATE TABLE IF NOT EXISTS addresses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            address TEXT
        )
        '''
        return self.manager(sql, commit=True)

    def insert_address(self, address):
        sql = '''
        INSERT INTO addresses (address) VALUES (?)
        '''
        return self.manager(sql, address, commit=True)

